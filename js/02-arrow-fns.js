/**
 * Стрілочні функції
 * - Оголошення
 * - Явне і неявне поверненя
 * - Псевдомасив arguments (...args)
 * - Інлайн стрілочні функції
 */

// function declaration (оголошення функції)
function add(a, b, c) {
  return a + b + c;
}

// function expression (функціональний вираз)
const addExpression = function (a, b, c) {
  return a + b + c;
};

// arrow function (стрілочна функція)
const addArrow = (a, b, c) => a + b + c;

/*

* 1. function declaration (оголошення функції)
Може викликатись в будь-якому місці програми (працює принцип підняття hoisting)

* 2. function expression (функціональний вираз)
Може викликатись тільки після оголошення, тому що фукнція зберігається у константу як значення, тому на неї діють такі самі обмеження як і на змінні/константи

* 3. arrow function (стрілочна функція)
На неї діють такі самі обмеження як і на функціональний вираз, тому що по суті стрілочна функція являється синтаксичним цукром функціонального виразу (теж саме, але синтаксис інший).
Унікальності:
- якщо фукнція очікує один параметр - можна не ставити круглі дужки ()
- якщо тіло функція складається з однієї інструкції (виразу), то його можна відразу повернути неявним поверненням (без фігурних дужок та без оператора return)
- стрілочні функції не мають локальної змінної arguments
*/

// console.log(add(5, 10, 15));
// console.log(addArrow(5, 10, 15));

/**
 * ---------------------------
 */
function fnA() {
  return {
    a: 5,
  };
}

// console.log(fnA());

// коли ви хочете неявно повернути обʼєкт у стрілочній функції, вам обовʼязково потрібно огорнути його в круглі дужки, інакше джаваскрипт буде сприймати фігурні дужки не як літерал обʼєкту, а як тіло функції

const arrowFnA = () => ({ a: 5 });

// const arrowFnA = () => {
//   return { a: 5 };
// };

// console.log(arrowFnA());

/**
 * Функція calc(a, b, callback)
 */

function calc(a, b, callback) {
  const result = callback(a, b);
  console.log(result);
}

// const sumExpr = function (x, y) {
//   return x + y;
// };

// const sumArrow = (x, y) => x + y;

calc(2, 3, (x, y) => x + y);

calc(10, 8, (x, y) => x - y);

// calc(2, 3, function (x, y) {
//   return x + y;
// });

// calc(10, 8, function (x, y) {
//   return x - y;
// });
